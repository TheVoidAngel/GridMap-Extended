//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""PlayerInputs"",
            ""id"": ""fa14ced5-2a01-46da-b282-f05210075432"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""b938eb47-8cba-4e15-8eb7-bfa9b1f2764a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SpeakAroundMe"",
                    ""type"": ""Button"",
                    ""id"": ""07fdd50a-e307-4439-a71b-9ed34dd051cf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpeakCoordinates"",
                    ""type"": ""Button"",
                    ""id"": ""21f1c3b8-c323-466a-8390-b2f868cb30fb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpeakLandmarks"",
                    ""type"": ""Button"",
                    ""id"": ""5f40a07e-5c8a-467b-bee5-80a0f35ff325"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpeakAmbiant"",
                    ""type"": ""Button"",
                    ""id"": ""3c640adb-e809-4bb3-a0aa-199a4c03f47f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleAmbiant"",
                    ""type"": ""Button"",
                    ""id"": ""9d34ade5-af51-4234-a66a-6dbafb4f4a91"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""acd30c5d-dd24-4a5d-b901-a9440ea4a15e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""2b0ec767-109f-4b4b-8e40-2a7f295dd214"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""4660c0c9-5d10-4272-9fec-f84c14ce08dd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""f4d038a6-8609-4b7e-99bb-29b04f08eb55"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""10f46fe6-62b6-4cfc-b75a-6b6ce665d95e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector 2"",
                    ""id"": ""1900057e-7c69-4897-a52b-62d570238cbf"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""dc8ffdce-9d6a-406e-8445-412f41306115"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""1d520e69-5108-47ef-8088-afabad1b994a"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""813f87a6-66f9-4546-ac06-6d38aa64b294"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""4d224ce3-f2ab-475b-8bc5-e92d097e9bb3"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b4f6fe36-39de-49b6-8a11-5de6795ea6dd"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6dd9e0ed-3948-4540-a7bf-c24cb6d74745"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpeakAroundMe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78fb7105-8dd3-4b2e-8772-82c454938967"",
                    ""path"": ""<DualShockGamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpeakAroundMe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7526a5b1-e30f-4660-9ac4-b47b80e391c3"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpeakCoordinates"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""02091833-27b5-4633-a426-6ee6638c82d2"",
                    ""path"": ""<DualShockGamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpeakCoordinates"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b51db767-7e99-49e5-8456-dd8e01a32889"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpeakLandmarks"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ad0cb7b-f283-4dce-8bc6-68a3483020fc"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpeakAmbiant"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""356b859d-030e-401b-9662-bb4d843b82e9"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleAmbiant"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerInputs
        m_PlayerInputs = asset.FindActionMap("PlayerInputs", throwIfNotFound: true);
        m_PlayerInputs_Move = m_PlayerInputs.FindAction("Move", throwIfNotFound: true);
        m_PlayerInputs_SpeakAroundMe = m_PlayerInputs.FindAction("SpeakAroundMe", throwIfNotFound: true);
        m_PlayerInputs_SpeakCoordinates = m_PlayerInputs.FindAction("SpeakCoordinates", throwIfNotFound: true);
        m_PlayerInputs_SpeakLandmarks = m_PlayerInputs.FindAction("SpeakLandmarks", throwIfNotFound: true);
        m_PlayerInputs_SpeakAmbiant = m_PlayerInputs.FindAction("SpeakAmbiant", throwIfNotFound: true);
        m_PlayerInputs_ToggleAmbiant = m_PlayerInputs.FindAction("ToggleAmbiant", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerInputs
    private readonly InputActionMap m_PlayerInputs;
    private List<IPlayerInputsActions> m_PlayerInputsActionsCallbackInterfaces = new List<IPlayerInputsActions>();
    private readonly InputAction m_PlayerInputs_Move;
    private readonly InputAction m_PlayerInputs_SpeakAroundMe;
    private readonly InputAction m_PlayerInputs_SpeakCoordinates;
    private readonly InputAction m_PlayerInputs_SpeakLandmarks;
    private readonly InputAction m_PlayerInputs_SpeakAmbiant;
    private readonly InputAction m_PlayerInputs_ToggleAmbiant;
    public struct PlayerInputsActions
    {
        private @Controls m_Wrapper;
        public PlayerInputsActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerInputs_Move;
        public InputAction @SpeakAroundMe => m_Wrapper.m_PlayerInputs_SpeakAroundMe;
        public InputAction @SpeakCoordinates => m_Wrapper.m_PlayerInputs_SpeakCoordinates;
        public InputAction @SpeakLandmarks => m_Wrapper.m_PlayerInputs_SpeakLandmarks;
        public InputAction @SpeakAmbiant => m_Wrapper.m_PlayerInputs_SpeakAmbiant;
        public InputAction @ToggleAmbiant => m_Wrapper.m_PlayerInputs_ToggleAmbiant;
        public InputActionMap Get() { return m_Wrapper.m_PlayerInputs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInputsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerInputsActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerInputsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerInputsActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @SpeakAroundMe.started += instance.OnSpeakAroundMe;
            @SpeakAroundMe.performed += instance.OnSpeakAroundMe;
            @SpeakAroundMe.canceled += instance.OnSpeakAroundMe;
            @SpeakCoordinates.started += instance.OnSpeakCoordinates;
            @SpeakCoordinates.performed += instance.OnSpeakCoordinates;
            @SpeakCoordinates.canceled += instance.OnSpeakCoordinates;
            @SpeakLandmarks.started += instance.OnSpeakLandmarks;
            @SpeakLandmarks.performed += instance.OnSpeakLandmarks;
            @SpeakLandmarks.canceled += instance.OnSpeakLandmarks;
            @SpeakAmbiant.started += instance.OnSpeakAmbiant;
            @SpeakAmbiant.performed += instance.OnSpeakAmbiant;
            @SpeakAmbiant.canceled += instance.OnSpeakAmbiant;
            @ToggleAmbiant.started += instance.OnToggleAmbiant;
            @ToggleAmbiant.performed += instance.OnToggleAmbiant;
            @ToggleAmbiant.canceled += instance.OnToggleAmbiant;
        }

        private void UnregisterCallbacks(IPlayerInputsActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @SpeakAroundMe.started -= instance.OnSpeakAroundMe;
            @SpeakAroundMe.performed -= instance.OnSpeakAroundMe;
            @SpeakAroundMe.canceled -= instance.OnSpeakAroundMe;
            @SpeakCoordinates.started -= instance.OnSpeakCoordinates;
            @SpeakCoordinates.performed -= instance.OnSpeakCoordinates;
            @SpeakCoordinates.canceled -= instance.OnSpeakCoordinates;
            @SpeakLandmarks.started -= instance.OnSpeakLandmarks;
            @SpeakLandmarks.performed -= instance.OnSpeakLandmarks;
            @SpeakLandmarks.canceled -= instance.OnSpeakLandmarks;
            @SpeakAmbiant.started -= instance.OnSpeakAmbiant;
            @SpeakAmbiant.performed -= instance.OnSpeakAmbiant;
            @SpeakAmbiant.canceled -= instance.OnSpeakAmbiant;
            @ToggleAmbiant.started -= instance.OnToggleAmbiant;
            @ToggleAmbiant.performed -= instance.OnToggleAmbiant;
            @ToggleAmbiant.canceled -= instance.OnToggleAmbiant;
        }

        public void RemoveCallbacks(IPlayerInputsActions instance)
        {
            if (m_Wrapper.m_PlayerInputsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerInputsActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerInputsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerInputsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerInputsActions @PlayerInputs => new PlayerInputsActions(this);
    public interface IPlayerInputsActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnSpeakAroundMe(InputAction.CallbackContext context);
        void OnSpeakCoordinates(InputAction.CallbackContext context);
        void OnSpeakLandmarks(InputAction.CallbackContext context);
        void OnSpeakAmbiant(InputAction.CallbackContext context);
        void OnToggleAmbiant(InputAction.CallbackContext context);
    }
}
